---
title: Bayesian analysis of longitudinal multilevel data using brms and rethinking - part 8  
description: In part 8 of this series, I continue fitting an ODE model using Stan.
author: Andreas Handel
date: 2024-02-18
date-modified: last-modified
aliases: 
  - ../longitudinal-multilevel-bayesian-analysis-8/
categories: 
- R
- Data Analysis
- Bayesian
- Stan
image: "featured.png"
image-alt: "trajectories generated by ODE model"
execute:
  echo: false
engine: knitr
---



```{r, include=FALSE, cache=FALSE}
knitr::read_chunk('cmdstanr-ode-script.R')
```

# Overview

This tutorial continues [the series of posts](/posts/2022-02-22-longitudinal-multilevel-bayes-1/)
showing how to fit longitudinal data using Bayesian multilevel/hierarchical/mixed-effects models. To be able to follow along, you should start with the first post. Otherwise, the following won't make much sense üòÅ.

This tutorial is part 2 of fitting and ordinary differential equation (ODE) model with Stan. I will not repeat things I covered [in part 1 of the ODE post]().

Here is [the Stan code for this example](stancode-ode.stan) and this is [the R script that runs everything](cmdstanr-ode-script.R).



# Introduction

For a research project, I wanted to fit an ODE model with Stan. I needed to teach myself first. I started this by slowly working my way up to implementing a model with `cmdstanr` and `Stan`. Read the prior posts to follow along. Once you are caught up, come back here üòÅ.






## The model

It's the same overall model as in the [prior post]()



The overall structure of the model structure remains the same from the previous example. The difference is that now the virus trajectory is described by an ODE model.

These are the components of the new model, now with an ODE model describing the deterministic part.
I'm not sure what the best mathematical notation is, here is an option.

$$
\begin{aligned}
\textrm{Outcome} \\
Y_{i,t}   \sim \mathrm{Normal}\left(\log(V_{i,t}), \sigma\right) \\
\\
\textrm{ODE model defining V} \\
\dot U  = -\beta_i UV \\ 
\dot I  = \beta_i UV - \gamma_i I \\
\dot V  = \alpha_i I - \eta_i V \\
\\
\textrm{Deterministic models for main parameters} \\
\alpha_{i}   =  a_{0,i} + a_1 \left(\log (D_i) - \log (D_m)\right)  \\
\beta_{i}   =  b_{0,i} + b_1 \left(\log (D_i) - \log (D_m)\right) \\
\gamma_{i}   =  g_{0,i} + g_1 \left(\log (D_i) - \log (D_m)\right) \\
\eta_{i}   =  e_{0,i} + e_1 \left(\log (D_i) - \log (D_m)\right) \\
\end{aligned}
$$

This model is similar in structure to the previous non-mechanistic ones. Each model parameter depends on the dose as well as potentially on individual differences. The main difference is that to obtain the time-series for the outcome (here, virus load), we need to integrate the ODE model at each iteration of the Stan sampler.


To fully specify the model, we need to give all parameters distributions. 
Here are the distributions for the population-level parameters. These do not vary between individuals.


$$
\begin{aligned}
\textrm{population-level priors} \\
\sigma  \sim \mathrm{HalfCauchy}(0,1)  \\
a_1 \sim \mathrm{Normal}(0.1, 0.1) \\
b_1 \sim \mathrm{Normal}(-0.1, 0.1) \\
g_1 \sim \mathrm{Normal}(0.1, 0.1) \\
e_1 \sim \mathrm{Normal}(-0.1, 0.1) \\
\end{aligned}
$$


In addition, we allow some parameters to differ between individuals, and we'll implement hyper-parameters to allow these values to inform each other across individuals. This is again the adaptive prior concept from earlier.


$$
\begin{aligned}
\textrm{individal-level priors} \\
a_{0,i} \sim \mathrm{Normal}(\mu_a, \sigma_a) \\
b_{0,i}  \sim \mathrm{Normal}(\mu_b, \sigma_b) \\
g_{0,i} \sim \mathrm{Normal}(\mu_g, \sigma_g) \\
e_{0,i}  \sim \mathrm{Normal}(\mu_e, \sigma_e) \\
\\
\textrm{hyper priors} \\
\mu_a  \sim \mathrm{Normal}(3, 1) \\
\mu_b  \sim \mathrm{Normal}(1, 1) \\
\mu_g  \sim \mathrm{Normal}(3, 1) \\
\mu_e  \sim \mathrm{Normal}(1, 1) \\
\sigma_a  \sim \mathrm{HalfCauchy}(0,1)  \\
\sigma_b  \sim \mathrm{HalfCauchy}(0,1)  \\
\sigma_g  \sim \mathrm{HalfCauchy}(0,1)  \\
\sigma_e  \sim \mathrm{HalfCauchy}(0,1)  \\
\end{aligned}
$$

And that's the full model. Again, it is similar to the previous models, but now we need to implement an ODE model with Stan. 



# Model implementation

We previously used the `brms` and `rethinking` R packages to run our `Stan` models in `R`, without having to write `Stan` code. One can use these packages for ODEs, but still has to write some `Stan` code. I decided instead, for flexibility, I'm writing the full model in `Stan` and then fit it through `cmdstanr` in R.


```{r, packages, message=FALSE, warning = FALSE}
```

We'll use the same data as before. We need to reshape it a bit to get it into the format that `cmdstanr` requires. To make things inside the Stan code easier, we added some additional information.


```{r, data}
```


# Stan code

Next, we need to write the Stan model code. The code is again in a separate file called `stancode-ode.stan`. This code loads and compiles the Stan model.

```{r, make_stanmodel, message=FALSE, warning = FALSE, eval=FALSE}
```

Here is the code. It's getting big. I'm not going to explain it further. For some of the parts, I took inspiration from [this blog post by Danielle Narravo](https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/) 


```{.stan include="stancode-ode.stan"}
```

# Model fitting settings

As before, we need to specify settings for the MCMC algorithm and starting values (the latter of which is optional but I consider good practice).

```{r, fitconditions}
```

```{r, initialconditions}
```


# Model fitting 


This runs the model. It's not actually run here to speed up generation of this Quarto file, but the code chunk is in the R script, so you can run it.

```{r, run_m1, message=FALSE, warning = FALSE, output = FALSE, eval=FALSE}
```


# Model result loading

To save time, we don't run the model each time, instead we save the results and load them.

```{r, loadfits, message=FALSE, warning = FALSE}
```






I found [this book](https://stanpmx.github.io/) that covers some additional topics on the pharmacometrics type of modeling using Stan that I've been covering here. 



https://mpopov.com/tutorials/ode-stan-r/

https://mc-stan.org/docs/stan-users-guide/ode-solver.html







# Summary and further resources

I seem to borrow a lot of ideas and inspiration from [Danielle Navarro](https://djnavarro.net/). In the past, I've used her blog posts on Quarto, R and related topics. She also wrote a series of [pharmacometrics blog posts](https://blog.djnavarro.net/#category=Pharmacometrics), and the one called [] 








