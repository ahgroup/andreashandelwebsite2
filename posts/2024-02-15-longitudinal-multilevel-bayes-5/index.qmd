---
title: Bayesian analysis of longitudinal multilevel data - part 5  
description: Part 5 of a tutorial showing how to fit directly with Stan and cmdstanr.
author: Andreas Handel
date: 2024-02-15
date-modified: last-modified
aliases: 
  - ../longitudinal-multilevel-bayesian-analysis-5/
categories: 
- R
- Data Analysis
- Bayesian
- Stan
image: "featured.png"
image-alt: ""
execute:
  echo: false
engine: knitr
---



```{r, include=FALSE, cache=FALSE}
knitr::read_chunk('cmdstanr-fit-script.R')
```

A while ago, I wrote [a series of tutorials](/posts/2022-02-22-longitudinal-multilevel-bayes-1/) that discuss fitting longitudinal data using Bayesian multilevel/hierarchical/mixed-effects models.

For a research project, I now want to implement a model that uses a set of ordinary differential equations (ODEs). I figured to understand what I'm trying to do, I should first teach myself and write it up in a tutorial. 

To implement ODEs with Stan, one can't fully use the `rethinking` or `brms` package, one needs to write at least some Stan code. Based on my needs, it is best if I fully implement the model in Stan and call it from R through `cmdstanr`.

I was going to do all at once, but then realized it's better if I first re-implement the old (non ODE-based) setup with Stan code, and then once that's up and running, switch to the ODE model. 

So this post really sets the stage for the next one. It might be of interest to folks to see how to implement this question fully with Stan, even if they don't plan on using ODEs.



## Quick recap

I assume you read through the previous posts, at least [part 1](/posts/2022-02-22-longitudinal-multilevel-bayes-1/) which describes the overall setup and the models to be explored, and [part 2](/posts/2022-02-23-longitudinal-multilevel-bayes-2/) which explains the models further and fits the data using `rethinking`. If you didn't, the following won't make much sense üòÅ.

Previously, I explored several model variants. Here, I'm focusing on the adaptive pooling model (which I previously labeled model 4). As a repeat, here are the model equations.


$$
\begin{aligned}
\textrm{Outcome} \\
Y_{i,t}   \sim \mathrm{Normal}\left(\mu_{i,t}, \sigma\right) \\
\\
\textrm{main model describing the virus trajectory} \\
\mu_{i,t}   =  \exp(\alpha_{i}) \log (t_{i}) -\exp(\beta_{i}) t_{i} \\
\\
\textrm{Deterministic models for main parameters} \\
\alpha_{i}   =  a_{0,i} + a_1 \left(\log (D_i) - \log (D_m)\right)  \\
\beta_{i}   =  b_{0,i} + b_1 \left(\log (D_i) - \log (D_m)\right) \\
\\
\textrm{population-level priors} \\
\sigma  \sim \mathrm{HalfCauchy}(0,1)  \\
a_1 \sim \mathrm{Normal}(0.1, 0.1) \\
b_1 \sim \mathrm{Normal}(-0.1, 0.1) \\
\\
\textrm{individal-level priors} \\
a_{0,i} \sim \mathrm{Normal}(\mu_a, \sigma_a) \\
b_{0,i}  \sim \mathrm{Normal}(\mu_b, \sigma_b) \\
\\
\textrm{hyper priors} \\
\mu_a  \sim \mathrm{Normal}(2, 1) \\
\mu_b  \sim \mathrm{Normal}(0.5, 1) \\
\sigma_a  \sim \mathrm{HalfCauchy}(0,1)  \\
\sigma_b  \sim \mathrm{HalfCauchy}(0,1)  \\
\end{aligned}
$$


# Model implementation

We previously used the `brms` and `rethinking` R packages to run our `Stan` models in `R`, without having to write `Stan` code. Of course, we could implement the model above in either of those packages. But in preparation of what I really want to do (using ODE models, and eventually fully account for censored data), I need to switch to coding the model in `Stan`. There might be hacks to do it with `brms` or `rethinking`, but it seems more flexible and also more transparent to just code the full model in `Stan`. We'll still run it through R using `cmdstanr`. 

The script for code below is [here](cmdstanr-fit-script.R) and the separate file with the Stan code [is here](stancode-2par.stan).

```{r, packages, message=FALSE}
```

We'll use the same data as before. We just need to reshape it a bit


```{r, data}
```

Next, we'll load the Stan model and take a look at it.

```{r, make_stanmodel}
```


```{r, show_stancode}
```

I added comments to the Stan model, but if you have never written Stan code, this is likely not fully clear. I won't try to explain Stan code n detail here. There are lots of good resources on the [Stan website](https://mc-stan.org/) and other places online. I'm sure you'll find something that you find accessible to learn the basics of writing Stan code.


Next, we need to specify settings for the Stan algorithm to run. I'm again not explaining those, see the Stan documentation.

```{r, fitconditions}
```


One doesn't have to set initial conditions, but it's often helpful.

```{r, initialconditions}
```

Running the model

```{r, run_m1}
```




# Summary and continuation









