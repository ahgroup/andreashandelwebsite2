---
title: Bayesian analysis of longitudinal multilevel data - part 6  
description: Part 6 of a tutorial showing how to fit directly with Stan and cmdstanr.
author: Andreas Handel
date: 2024-02-16
date-modified: last-modified
aliases: 
  - ../longitudinal-multilevel-bayesian-analysis-6/
categories: 
  - R
  - Data Analysis
  - Bayesian
  - Stan
image: "featured.png"
image-alt: "Traceplot for several model parameters."
execute:
  echo: true
engine: knitr
---



```{r, include=FALSE, cache=FALSE}
knitr::read_chunk('cmdstanr-4par-script.R')
```

# Overview

This is an extension of [a `cmdstanr`/Stan model](/posts/2024-02-15-longitudinal-multilevel-bayes-5/) to fit longitudinal data using Bayesian multilevel/hierarchical/mixed-effects models. It is a continuation of a prior series of posts. You should [start at the beginning](/posts/2022-02-22-longitudinal-multilevel-bayes-1/). 

Here is [the Stan code for this example](stancode-4par.stan) and this is [the R script that runs everything](cmdstanr-4par-script.R).


# Introduction

As described [in the prior post](/posts/2024-02-15-longitudinal-multilevel-bayes-5/) I want to implement an ordinary differential equation (ODE) model with Stan. I am slowly building up to that. 

While I had planned to hop from the 2-parameter `cmdstanr` and Stan model straight to the ODE model, I ended up deciding on one more intermediate step. Namely, I know that the ODE model I want to use has 4 main parameters, as opposed to the 2 parameters used here. I figured I might first build a more complex, 4-parameter non-ODE model before I try to implement the ODE model.


# New deterministic model 

The obvious candidate for that 4-parameter model is the equation I [mentioned previously](/posts/2022-02-25-longitudinal-multilevel-bayes-4/#alternative-model-for-time-series-trajectory) and that we ended up using in [one of our  papers](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10310361/). This equation was introduced as a good model to fit virus load data for an acute infection in [this paper](https://bmcpublichealth.biomedcentral.com/articles/10.1186/1471-2458-11-S1-S10).

I'm deviating from the original paper by giving the parameters different names ($\alpha$, $\beta$, $\gamma$, $\eta$ instead of $p$, $g$, $d$, $k$) to be consistent with what I've been doing so far. 

Also, since the original model was developed and set up with the assumptions that all 4 main parameters are positive, I need to ensure that by using the [previously described approach](/posts/2022-02-22-longitudinal-multilevel-bayes-1/#numerical-trickeries) of exponentiating the parameters. 

This leads to this equation for the virus load trajectory.

$$
\begin{aligned}
\mu_{i,t} = \log\left( \frac{2 \exp(\alpha_{i})}{e^{-\exp(\beta_{i})  (t_i - \exp(\gamma_{i}))} + e^{\exp(\eta_{i})  (t_i - \exp(\gamma_{i}))}}\right).\\
\end{aligned}
$$

Here's a bit of R code to explore this equation and to determine values for parameter priors and starting conditions that lead to curves that are consistent with our simulated data.

```{r, explore-model}
```



## Full model structure

The rest of the model follow the previous one, just with more parameters. They all get their own equations. Here are the main components of the the new  model.


$$
\begin{aligned}
\textrm{Outcome} \\
Y_{i,t}   \sim \mathrm{Normal}\left(\mu_{i,t}, \sigma\right) \\
\\
\textrm{main model describing the virus trajectory} \\
\mu_{i,t} = \log\left( \frac{2 \exp(\alpha_{i})}{e^{-\exp(\beta_{i})  (t_i - \exp(\gamma_{i}))} + e^{\exp(\eta_{i})  (t_i - \exp(\gamma_{i}))}}\right).\\
\\
\textrm{Deterministic models for main parameters} \\
\alpha_{i}   =  a_{0,i} + a_1 \left(\log (D_i) - \log (D_m)\right)  \\
\beta_{i}   =  b_{0,i} + b_1 \left(\log (D_i) - \log (D_m)\right) \\
\gamma_{i}   =  g_{0,i} + g_1 \left(\log (D_i) - \log (D_m)\right) \\
\eta_{i}   =  e_{0,i} + e_1 \left(\log (D_i) - \log (D_m)\right) \\
\end{aligned}
$$


## Parameter distributions

To fully specify the model, we need to give all parameters distributions. 
Here are the distributions for the population-level parameters. These do not vary between individuals. I'm choosing values for the prior distributions assuming that dose will lead to an increase in peak, time to peak and growth rate, and a reduction in decay rate. I'm only indicating the values with an `X` below since I keep changing them in the code and then they are out of sync here. Check the R script to see the chosen values.


$$
\begin{aligned}
\textrm{population-level priors} \\
\sigma  \sim \mathrm{Exponential}(X)  \\
a_1 \sim \mathrm{Normal}(X,X) \\
b_1 \sim \mathrm{Normal}(X,X) \\
g_1 \sim \mathrm{Normal}(X,X) \\
e_1 \sim \mathrm{Normal}(X,X) \\
\end{aligned}
$$


In addition, we allow some parameters to differ between individuals, and we'll implement hyper-parameters to allow these values to inform each other across individuals. This is again the adaptive pooling concept discussed previously.

I'm setting values for the prior distributions such that the virus load curve looks somewhat reasonable, based on the quick exploration of the model above. Again, not showing exact values here to not create confusion between what I write here and potentially different values I end up using in the code (and forgetting to update here). See the code for the actual values.


$$
\begin{aligned}
\textrm{individal-level priors} \\
a_{0,i} \sim \mathrm{Normal}(\mu_a, \sigma_a) \\
b_{0,i}  \sim \mathrm{Normal}(\mu_b, \sigma_b) \\
g_{0,i} \sim \mathrm{Normal}(\mu_g, \sigma_g) \\
e_{0,i}  \sim \mathrm{Normal}(\mu_e, \sigma_e) \\
\\
\textrm{hyper priors} \\
\mu_a  \sim \mathrm{Normal}(X, X) \\
\mu_b  \sim \mathrm{Normal}(X, X) \\
\mu_g  \sim \mathrm{Normal}(X, X) \\
\mu_e  \sim \mathrm{Normal}(X, X) \\
\sigma_a  \sim \mathrm{Exponential}(X)  \\
\sigma_b  \sim \mathrm{Exponential}(X)  \\
\sigma_g  \sim \mathrm{Exponential}(X)  \\
\sigma_e  \sim \mathrm{Exponential}(X)  \\
\end{aligned}
$$



And that's the full model. The basic structure is the same as before, but the model is bigger because I'm now modeling the virus trajectory (given by $\mu_{i,t}$) with 4 main parameters.


# Model implementation

We'll follow the same setup as [in the previous post](/posts/2024-02-15-longitudinal-multilevel-bayes-5/).
Links to the Stan and R code files are given at the top of this document.


```{r, packages, message=FALSE}
```

Some setup bits

```{r, setup, message=FALSE}
```



We'll use the same data as before. I'm making one more change. Instead of hard-coding the values for the prior distributions into the Stan code, I'm assigning some of them labels and then pass values into Stan from R. This makes exploring the Stan model more flexible, I don't need to re-edit the Stan code if I want to try different values for the priors. These values for the priors need to be passed in as part of the data. I could do this for all parameters, but out of laziness, and because I don't change them much, I'm hard-coding the sigma parameters.


```{r, data}
```


# Stan code

Next, we need to write the Stan model code. While one could embed Stan code inside an R script, I find it best to write that code in a separate file and then load it. Here, the code is in file called `stancode-4par.stan`. This code loads and compiles the Stan model.

```{r, make_stanmodel, message=FALSE, warning = FALSE, eval=FALSE}
```

Next, we'll take a quick look at the Stan model code. The model is basically like the previous one, updated to reflect the model equations above. As mentioned above, instead of hard-coding values for prior distributions inside the Stan code, I'm passing some of them into the code as data. The advantage of passing them in is that I can more quickly play around with different values and see how results change. It also ensures that I use the same values in all parts of the model (e.g., `model` and `generated quantities` blocks).

```{.stan include="stancode-4par.stan"}
```




## Model fitting settings

These are the settings for the model fitting routine. Basically the same as before, only more initial conditions now because we have more parameters. And of course different values, since our model changed.

```{r, fitconditions}
```


```{r, initialconditions}
```


# Model fitting 

This runs the model. It's not actually run here to speed up generation of this Quarto file, but the code chunk is in the R script, so you can run it.

```{r, run_m1, message=FALSE, warning = FALSE, output = FALSE, eval=FALSE}
```

```{r, savefits, message=FALSE, warning = FALSE, eval=FALSE}
```



# Model result loading

To save time, we don't run the model each time, instead we save the results and load them.

```{r, loadfits, message=FALSE, warning = FALSE}
```

# Model diagnostics

First, we look at diagnostics from the fitting routine to make sure nothing obviously wrong shows up.


```{r, diagnose_m1,  warning = FALSE, message = FALSE}
```

Ok, so the sampler isn't quite happy. We should sample more and more stringently, but that would take very long. So for the purpose of this investigation, and given that I'm only exploring this model as a stepping stone to the ODE model I'm really interested in, I'll leave it the way it is. If this were an actual research project, I would obviously need to improve the model performance.

Another important check are to make a few diagnostic plots. We'll first need to get the samples, both with and without warmups, to be able to make various figures.

```{r, get_samples_m1,  warning = FALSE}
```

Now we can look at a few figures. Here I'm again showing a trace plot and a pairs plot. 

```{r, plot_par_m1,  warning = FALSE}
```

The plots look reasonable. Well-mixing chains and no noticeable correlations among parameters.


# Model results

Now that we think we can somewhat trust that the sampling worked, we'll take a look at a summary table for the distributions of some of the model parameters. I cut it off since there are too many to show (each individual as multiple parameters with associated distributions). We'll also look at the posteriors in a graph.

```{r, results_m1}
```


We can't really compare with the values we used to generate the model since we are using a different model to fit the data, so we shouldn't expect any parameters to be similar. Thus, I'm not focusing further on the values. Again, for a real research project, you would want to carefully evaluate the parameters (after addressing the problems with the algorithm not working well).



# Priors and Posteriors

Next, we'll compare prior and posterior distributions. This can give an indication if the priors were selected well or are too broad or overly influential. To be able to show priors, we needed all that extra information in the _generated quantities_ block in the Stan code.


```{r, prep_data_m1}
```


```{r, prior_post_m1}
```

The plots show that the priors don't overly influence the results, the data dominates the posteriors (they move and get more peaked, an indication that the data controls the posterior shape).


# Observed versus predicted


Another useful plot is to look at observed versus predicted results. This is shown in the following plot.


```{r, obs_pred_m1}
```


The data (black line, $y$ variable) and the model (thin green line, $y_{rep}$) are following are a bit off. That indicates that the model didn't fully capture the patterns found in the data and might need modification.


# Cross-validation tests

Here's again some further exploration via cross-validation with the `loo` package. 

```{r, loo_m1_part1,  warning = FALSE, message = FALSE}
```

Some values aren't too great. This again suggests that we need to tweak the model or run it longer with more stringent settings.

Here's some more LOO diagnostics.

```{r, loo_m1_part2,  warning = FALSE, message = FALSE}
```

The marginal posterior predictive plot suggests some improvement might be possible (so that the solid line is more on top of the green lines). [See here for more](https://mc-stan.org/loo/articles/loo2-example.html).



# Model predictions

Finally, we again want to look at the actual data and the model predictions. It's exactly the same code as for the 2-parameter model.

```{r, make_predictions,  warning = FALSE, message = FALSE}
```

```{r, plot_predictions,  warning = FALSE, message = FALSE}
```

The model fits don't look that great. I'm not sure why the model isn't capturing the data better, if it needs more iterations and/or better choice of priors, or if there's something inherent about the structure of this model not being able to capture the data generated by the 2-parameter model, even though it is more flexible with its 4 parameters.


# Alternative model

The previous model isn't fitting too well. I'm not sure why. Either it's because the underlying model just doesn't fit well, or there's something about the statistical model and the adaptive (and non-adaptive) priors that lead to the strange results.

I wanted to try another model to look into that. It's the same virus load model as above, but with a much simpler parameter structure. We'll have only individual-level parameters which are independent of each other, and there's no dose dependence. This is scientifically not interesting, I'm just using it to understand better why the fits aren't that great.

This is the updated model.

$$
\begin{aligned}
\textrm{Outcome} \\
Y_{i,t}   \sim \mathrm{Normal}\left(\mu_{i,t}, \sigma\right) \\
\\
\textrm{main model describing the virus trajectory} \\
\mu_{i,t} = \log\left( \frac{2 \exp(\alpha_{i})}{e^{-\exp(\beta_{i})  (t_i - \exp(\gamma_{i}))} + e^{\exp(\eta_{i})  (t_i - \exp(\gamma_{i}))}}\right).\\
\\
\textrm{Deterministic models for main parameters} \\
\alpha_{i}   =  a_{0,i}   \\
\beta_{i}   =  b_{0,i}  \\
\gamma_{i}   =  g_{0,i}  \\
\eta_{i}   =  e_{0,i}  \\
\\
\textrm{Priors} \\
a_{0,i} \sim \mathrm{Normal}(X, X) \\
b_{0,i}  \sim \mathrm{Normal}(X, X) \\
g_{0,i} \sim \mathrm{Normal}(X, X) \\
e_{0,i}  \sim \mathrm{Normal}(X, X) \\
\end{aligned}
$$


# Alternative model implementation

Here's the code to set up and run this model.
We of course have a new Stan model, need to pick new priors and new initial conditions.


```{r, data_m2}
```


```{r, make_stanmodel2, message=FALSE, warning = FALSE, eval=FALSE}
```


This runs the model and saves results.

```{r, run_m2, message=FALSE, warning = FALSE, output = FALSE, eval=FALSE}
```

```{r, savefits_m2, message=FALSE, warning = FALSE, eval=FALSE}
```

Load results.

```{r, loadfits_m2}
```

Get the samples.

```{r, get_samples_m2}
```


Plotting of data and model predictions

```{r, make_predictions_m2,  warning = FALSE, message = FALSE}
```

```{r, plot_predictions_m2,  warning = FALSE, message = FALSE}
```




# Summary and continuation

This completes the 4-parameter model. I just wanted to get a working model, I'm not really interested in the model results. I just wanted to set the stage for the next version, which is the 4-parameter ODE model. So it's finally time to [tackle that one](/posts/2024-02-17-longitudinal-multilevel-bayes-7/).